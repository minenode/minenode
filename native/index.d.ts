/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class MineBuffer {
  constructor(buf?: Buffer | undefined | null);
  reserve(size: number): void;
  getBuffer(): Buffer;
  remaining(): number;
  get readOffset(): number;
  set readOffset(offset: number);
  get writeOffset(): number;
  set writeOffset(offset: number);
  static clone(): MineBuffer;
  reset(): void;
  peekUByte(): number;
  seekDelta(delta: number): void;
  readUByte(): number;
  readBytes(len: number): Buffer;
  readRemaining(): Buffer;
  readByte(): number;
  readBoolean(): boolean;
  readInt(): number;
  readUInt(): number;
  readLong(): bigint;
  readULong(): bigint;
  readFloat(): number;
  readDouble(): number;
  readVarInt(): number;
  readVarLong(): bigint;
  readString(): string;
  readShort(): number;
  readUShort(): number;
  readPosition(): Vec3;
  readUUID(): string;
  writeBytes(buf: Buffer): void;
  // 1 bytes
  writeUByte(val: number): void;
  // 1 bytes
  writeByte(val: number): void;
  //** 1 bytes */
  writeShort(val: number): void;
  // 2 bytes
  writeUShort(val: number): void;
  // 2 bytes
  writeBoolean(val: boolean): void;
  // 4 bytes
  writeFloat(val: number): void;
  // 4 bytes
  writeInt(val: number): void;
  // 4 bytes
  writeUInt(val: number): void;
  // 8 bytes
  writeDouble(val: number): void;
  // 8 bytes
  writeLong(val: bigint): void;
  // ≥ 1 ≤ 5 bytes
  writeVarInt(val: number): void;
  // ≥ 1 ≤ 10 bytes
  writeVarLong(val: bigint): void;
  // 16 bytes
  writeUUID(val: string): void;
  // 8 bytes
  writePosition(val: Vec3): void;
  // ≥ 1 ≤ (n×4) + 3 bytes
  writeString(val: string): void;
}

export class Vec2 {
  x: number;
  y: number;
  constructor(x: number, y: number);
  static zero(): Vec2;
  magnitude(): number;
  angle(): number;
  toString(): string;
  toJSON(): string;
  add(other: Vec2): void;
  sub(other: Vec2): void;
  mul(other: Vec2): void;
  div(other: Vec2): void;
  rotate(angle: number): void;
  normalize(): void;
  distance(other: Vec2): number;
}

export class Vec3 {
  x: number;
  y: number;
  z: number;
  constructor(x: number, y: number, z: number);
  static zero(): Vec3;
  magnitude(): number;
  angle(): number;
  toString(): string;
  toJSON(): string;
  add(other: Vec3): void;
  sub(other: Vec3): void;
  mul(other: Vec3): void;
  div(other: Vec3): void;
  rotate(angle: number): void;
  normalize(): void;
  distance(other: Vec3): number;
}

export class Vec5 {
  x: number;
  y: number;
  z: number;
  yaw: number;
  pitch: number;
  constructor(x: number, y: number, z: number, yaw: number, pitch: number);
  static zero(): Vec5;
  magnitude(): number;
  angle(): number;
  toString(): string;
  toJSON(): string;
  add(other: Vec5): void;
  sub(other: Vec5): void;
  mul(other: Vec5): void;
  div(other: Vec5): void;
  rotate(angle: number): void;
  normalize(): void;
  distance(other: Vec5): number;
  toVec3(): Vec3;
  toVec2(): Vec2;
  intersectsWith(other: Vec3): boolean;
}
